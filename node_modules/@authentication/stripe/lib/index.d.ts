/// <reference types="stripe" />
/// <reference types="node" />
/// <reference types="express" />
import { URL } from 'url';
import { Request, Response, NextFunction } from 'express';
import { Mixed, Profile, RedirectStrategy } from '@authentication/types';
import Stripe = require('stripe');
export declare type RawProfile = Stripe.accounts.IAccount;
export { Profile };
export interface Options {
    clientID?: string;
    secretKey?: string;
    callbackURL: string | URL;
    /**
     * Optionally provide keys to sign the cookie used to store "state"
     */
    cookieKeys?: string[];
    /**
     * Optionally override the default name for the cookie used to store "state"
     *
     * default: "authentication_oauth2"
     */
    cookieName?: string;
    trustProxy?: boolean;
}
export interface InitOptions<State> {
    /**
     * See: https://stripe.com/docs/connect/oauth-reference#get-authorize-request
     * Defaults to read_only
     */
    scope?: 'read_only' | 'read_write';
    state?: State;
    /**
     * Defaults to login for scope read_only and register for scope read_write.
     */
    stripeLanding?: 'login' | 'register';
    /**
     * Boolean to indicate that the user should always be asked to connect, even if they're already connected.
     *
     * Defaults to false.
     */
    alwaysPrompt?: boolean;
    registrationDefaults?: RegistrationDefaults;
}
export interface RegistrationDefaults {
    email?: string;
    url?: string;
    /**
     * Two-letter country code (e.g., US or CA).
     */
    country?: string;
    phoneNumber?: string;
    businessName?: string;
    businessType?: 'sole_prop' | 'corporation' | 'non_profit' | 'partnership' | 'llc';
    firstName?: string;
    lastName?: string;
    dateOfBirth?: {
        day: number;
        month: number;
        year: number;
    };
    address?: {
        street?: string;
        city?: string;
        state?: string;
        zip?: string;
    };
    physicalProduct?: boolean;
    shippingDays?: number;
    productCategory?: 'art_and_graphic_design' | 'advertising' | 'charity' | 'clothing_and_accessories' | 'consulting' | 'clubs_and_membership_organizations' | 'education' | 'events_and_ticketing' | 'food_and_restaurants' | 'software' | 'professional_services' | 'tourism_and_travel' | 'web_development' | 'other';
    productDescription?: string;
    /**
     * Ingeger in **Dollars**
     */
    averagePayment?: number;
    /**
     * The estimated past year's volume for the business. Must be an integer in dollar
     */
    pastYearVolume?: number;
    /**
     * Three-letter ISO code representing currency,
     *
     * Must prefill stripe_user[country] with the corresponding country.
     */
    currency?: string;
}
/**
 * The Stripe authentication strategy authenticates requests by delegating to
 * Stripe using the OAuth 2.0 protocol for connect.
 */
export default class StripeAuthentication<State = Mixed> implements RedirectStrategy<State, InitOptions<State>, {}> {
    private readonly _oauth;
    readonly stripe: Stripe;
    readonly callbackPath: string;
    constructor(options: Options);
    /**
     * Retrieve user profile from Stripe.
     *
     * This function constructs a normalized profile
     */
    getUserProfile(stripeAccountID: string): Promise<{
        profile: Profile;
        rawProfile: Stripe.accounts.IAccount;
    }>;
    isCallbackRequest(req: Request): boolean;
    userCancelledLogin(req: Request): boolean;
    redirectToProvider(req: Request, res: Response, next: NextFunction, options?: InitOptions<State>): void;
    completeAuthentication(req: Request, res: Response): Promise<{
        accessToken: string;
        refreshToken: string | undefined;
        stripeUserID: string;
        stripePublishableKey: string;
        scope: "read_only" | "read_write";
        livemode: boolean;
        profile: Profile;
        rawProfile: Stripe.accounts.IAccount;
        state: State | undefined;
    }>;
}
