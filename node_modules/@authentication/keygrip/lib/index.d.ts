/// <reference types="node" />
export interface Result<T = Buffer> {
    payload: T;
    outdated: boolean;
}
export declare abstract class Keygrip {
    abstract pack(payload: Buffer): Buffer;
    abstract unpack(data: Buffer): Result | null;
    packString(payload: string): string;
    unpackString(data: string): Result<string> | null;
}
export declare class KeygripSecret extends Keygrip {
    private readonly _keys;
    static readonly RECOMMENDED_KEY_LENGTH: number;
    static readonly MINIMUM_KEY_LENGTH: number;
    static createAsync(keys: ReadonlyArray<string | Buffer>): Promise<KeygripSecret>;
    constructor(keys: ReadonlyArray<string | Buffer>);
    encrypt(payload: Buffer): Buffer;
    tryDecrypt(data: Buffer, keyIndex?: number): Result | null;
    pack(payload: Buffer): Buffer;
    unpack(data: Buffer): Result | null;
}
export declare class KeygripPublic extends Keygrip {
    private readonly _keys;
    static readonly RECOMMENDED_KEY_LENGTH: number;
    static readonly MINIMUM_KEY_LENGTH: number;
    static createAsync(keys: ReadonlyArray<string | Buffer>): Promise<KeygripPublic>;
    constructor(keys: ReadonlyArray<string | Buffer>);
    sign(payload: Buffer): Buffer;
    tryVerify(data: Buffer, keyIndex?: number): Result | null;
    pack(payload: Buffer): Buffer;
    unpack(data: Buffer): Result | null;
}
export declare class KeygripPassThrough extends Keygrip {
    pack(payload: Buffer): Buffer;
    unpack(data: Buffer): Result;
}
